package com.laptrinhjavawebshop.controller.web;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.laptrinhjavawebshop.util.SecurityUtils;

@Controller(value ="homeControllerOfWeb")
public class HomeController {

    @RequestMapping(value = {"/trang-chu"}, method = RequestMethod.GET)
    public ModelAndView homePage() {
        ModelAndView mav = new ModelAndView("web/home");
        return mav;
    }

    @RequestMapping(value = {"/product"}, method = RequestMethod.GET)
    public ModelAndView homeProduct() {
        ModelAndView mav = new ModelAndView("web/product");
        return mav;
    }
    //controller Login
    @RequestMapping(value = "/dang-nhap", method = RequestMethod.GET)
	public ModelAndView loginPage() {
		ModelAndView mav = new ModelAndView("web/login");
		return mav;
	}
    //controller dangky
    @RequestMapping(value = "/dang-ky" , method = RequestMethod.GET)
	public ModelAndView registerAccount() {
		 ModelAndView mav = new ModelAndView("web/sign-up");
			return mav;
	}
  //viết 1 controller nếu ko phải admin mà muốn truy cập vào admin thì
  	// sẽ redirect ra trang 'dang-nhap'
    @RequestMapping(value = "/accessDenied", method = RequestMethod.GET)
	public ModelAndView accessDenied() {
		return new ModelAndView("redirect:/dang-nhap?accessDenied");
	}
    
    //CustomSuccessHandler
    @RequestMapping(value = "/customSuccessHandler", method = RequestMethod.GET)
    @PreAuthorize("isAuthenticated()")
    public class CustomSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {
    	
    	private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();
    	
    	@Override
    	public void handle(HttpServletRequest request, HttpServletResponse response, Authentication authentication)
    			throws IOException {

    //determineTargetUrl định tuyến URL nào mà nó sẽ trả về sau khi Authenticaiton
    //chính là phần Authorization . 		
    		
    		String targetUrl = determineTargetUrl(authentication);
    		if (response.isCommitted()) {
    			return;
    		}
    		redirectStrategy.sendRedirect(request, response, targetUrl);
    	}

    	public RedirectStrategy getRedirectStrategy() {
    		return redirectStrategy;
    	}
    	
    	public void setRedirectStrategy(RedirectStrategy redirectStrategy) {
    		this.redirectStrategy = redirectStrategy;
    	}

    	private String determineTargetUrl(Authentication authentication) {
    		String url = "";
    		
    		//SecurityUtils.getAuthorities() get cái code để phân quyền
    		List<String> roles = SecurityUtils.getAuthorities();
    		if (isAdmin(roles)) {
    			url = "/admin/home";
    		} else if (isUser(roles)) {
    			url = "/trang-chu";
    		}
    		return url;
    	}
    	
    	private boolean isAdmin(List<String> roles) {
    		if (roles.contains("ADMIN")) {
    			return true;
    		}
    		return false;
    	}
    	
    	private boolean isUser(List<String> roles) {
    		if (roles.contains("USER")) {
    			return true;
    		}
    		return false;
    	}
    }


}
